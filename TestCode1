import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.security.assertion.ValidHttpStatusCodesAssertion;
import com.eviware.soapui.security.assertion.InvalidHttpStatusCodesAssertion;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.basic.SimpleContainsAssertion;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.ProGroovyScriptAssertion;
import org.apache.poi.EmptyFileException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


TestProject project = getProject();
String[] columnHeaders = ["", "","", "", "", "",  "","",  "", "", "", "", "", ""  ];
String excelPath = "D:\\TestCase.xlsx";

ExcelManager excelManager = new ExcelManager(columnHeaders);
excelManager.writeTestCase(project);
//log.info excelManager.temp
excelManager.createExcel(excelPath);


public class ExcelManager {
	String[] COLUMN_HEADERS;
	XSSFWorkbook EXCEL_TC;
	int ROW;
	Sheet CRR_SHEET;
	String temp;
	public ExcelManager(String[] columnHeaders) {
		COLUMN_HEADERS = columnHeaders;
		EXCEL_TC = new XSSFWorkbook();
		init();
	}

	public void writeTestCase(TestProject project) {
		List<TestSuite> tSuites = project.getTestSuites();
		List<TestCase> tCases;
		List<TestStep> tSteps;
		String tSuiteName;
		String tCaseName;
	
		for(TestSuite tSuite in tSuites) {
			tSuiteName = tSuite.getName();
			tCases = tSuite.getTestCases();
			
			for(TestCase tCase in tCases) {
				tCaseName = tCase.getName();
				tSteps = tCase.getTestSteps();
				
				for(TestStep tStep in tSteps) {
					writeTC(tStep, tSuiteName, tCaseName);
				}
			}
			
		}
		/*
		Point p = new Point();
		row = sheet1.createRow(0);
		cell.setCellValue(COLUMN_HEADERS[i]);
		*/
	}

	private void writeTC(TestStep step, String suiteName, String  caseName) {
		int colCount = 0;
		Row row = CRR_SHEET.createRow(ROW++);
		Cell cell = createCell(row, colCount++, "center");
        	cell.setCellValue("TCID_" + ROW);

        	cell = createCell(row, colCount++, "center");
        	cell.setCellValue("");

		cell = createCell(row, colCount++, "center");
        	cell.setCellValue(suiteName);

		cell = createCell(row, colCount++, "center");
        	cell.setCellValue(caseName);

        	cell = createCell(row, colCount++, "center");
        	cell.setCellValue(step.getName());

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue("");

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue(step.getRequestRaw());

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue(step.getResponseRaw());

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue(step.getAssertions());
        	
		cell = createCell(row, colCount++, "center");
        	cell.setCellValue(step.getResult());

        	cell = createCell(row, colCount++, "center");
        	cell.setCellValue("JAE");

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue("");

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue("");

        	cell = createCell(row, colCount++, "left");
        	cell.setCellValue("");
        	
	}

	private Cell createCell(Row row, int colCount, String align) {
		CellStyle cellStyle = EXCEL_TC.createCellStyle();
		cellStyle.setBorderTop(CellStyle.BORDER_THIN);                        
        	cellStyle.setBorderLeft(CellStyle.BORDER_THIN);
        	cellStyle.setBorderRight(CellStyle.BORDER_THIN);
        	cellStyle.setBorderBottom(CellStyle.BORDER_THIN);
		if(align.equals("right")) {
			cellStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);
		} else if(align.equals("left")) {
			cellStyle.setAlignment(HSSFCellStyle.ALIGN_LEFT);
		} else {
			cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		}
		
		Cell cell = row.createCell(colCount);
		cell.setCellStyle(cellStyle);

		return cell;
	}

	public String testM() {
		return temp;
	}
	
	public void createExcel(String path) {
		try {
			File xlsFile = new File(path);
            	FileOutputStream fileOut = new FileOutputStream(xlsFile);
            	EXCEL_TC.write(fileOut);
        	} catch (FileNotFoundException e) {
			e.printStackTrace();
        	} catch (IOException e) {
            	e.printStackTrace();
        	}
	}

	private void init() {
		CRR_SHEET  = EXCEL_TC.createSheet("Sheet1");

        	CellStyle cellStyle = EXCEL_TC.createCellStyle();
        	cellStyle.setWrapText(true);
        	cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
        	cellStyle.setFillForegroundColor(HSSFColor.YELLOW.index);
        	cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
        	cellStyle.setBorderTop(CellStyle.BORDER_THIN);                        
        	cellStyle.setBorderLeft(CellStyle.BORDER_THIN);
        	cellStyle.setBorderRight(CellStyle.BORDER_THIN);
        	cellStyle.setBorderBottom(CellStyle.BORDER_THIN);
        
        	XSSFFont font = EXCEL_TC.createFont();
        	font.setFontHeightInPoints((short)10);
        	cellStyle.setFont(font);
   
        	Row row = null;
        	Cell cell = null;
        
        	row = CRR_SHEET.createRow(ROW++);
 
		for(int i=0; i<COLUMN_HEADERS.size(); i++ ) {
			CRR_SHEET.setColumnWidth(i, 5000);
        		cell = row.createCell(i);
        		cell.setCellValue(COLUMN_HEADERS[i]);
        		cell.setCellStyle(cellStyle);
        		//log.info COLUMN_HEADERS[i];
		}
       
	}
	
}


public TestProject getProject() {
	def currentProject = testRunner.testCase.testSuite.project;
	TestProject testProject = new TestProject(currentProject.getName());
	currentProject.getTestSuiteList().each {
		
		TestSuite testSuite = new TestSuite(it.getName());
		testProject.add(testSuite);
		
		it.getTestCaseList().each {
			
			TestCase testCase= new TestCase(it.getName());
			testSuite.add(testCase);
			
			it.getTestStepList().each {
				if(it.toString().indexOf("RestTestRequestStep") == -1){  
					return true;
				}
				TestStep step = makeTestStep(it);
				testCase.add(step);
	
			}
		}
	}
	return testProject;
}

public TestStep makeTestStep(RestTestRequestStep testStep) {
	TestStep step = new TestStep(testStep.getName()); 
	try {
		step.setRequestRaw(new String(testStep.testRequest.response.rawRequestData));
	}catch(Exception e) { }

	try {
		step.setResponseRaw(new String(testStep.testRequest.response.rawResponseData));
	}catch(Exception e) { }

	try {
		step.setAssertions(getAssertions(testStep));
	}catch(Exception e) { }

	try {
		step.setResult(getAssertionResult(testStep));
	}catch(Exception e) { }
	return step;
}


public String getAssertions(RestTestRequestStep step) {
	def assertionsList = step.getAssertionList()
	String assertionText = "";
	for( assertion in assertionsList){
		//log.info e.getToken() //gives the value of the content to search for
		
		if( assertion instanceof ValidHttpStatusCodesAssertion || assertion instanceof InvalidHttpStatusCodesAssertion){
			assertionText = assertionText + "* " + assertion.LABEL + " Expected = " + assertion.codes + "\n";
          } else if(assertion instanceof SimpleContainsAssertion) {
          	assertionText = assertionText + "* " + assertion.LABEL + " Expected = " + assertion.getToken() + "\n";
          } else if(assertion instanceof ProGroovyScriptAssertion) {
			assertionText = assertionText + "* " + assertion.LABEL + "\n";
          }
           assertion.status
	}
	return assertionText;
}


public String getAssertionResult(RestTestRequestStep step) {
	def assertionsList = step.getAssertionList()
	for( assertion in assertionsList){
		if(assertion.status.toString().equals("FAILED")) {
			return "Fail";
		} else if(assertion.status.toString().equals("VALID")) {
			return "Pass";
		}  else {
			return "";
		}
	}
}



public class TestProject {
	List<TestSuite> TEST_SUITES;
	String NAME;

	public TestProject(String name) {
		NAME = name;
		TEST_SUITES = new LinkedList<TestSuite>();
	}

	public void add(TestSuite suite) {
		TEST_SUITES.add(suite);
	}
	
	public List<TestSuite> getTestSuites() {
		return TEST_SUITES;
	}

	public void setCases(List<TestSuite> testSuite) {
		TEST_SUITES = testSuite;
	}	

	public String getName() {
		return NAME;
	}

	public void setName(String name) {
		NAME = name;
	}	
}



public class TestSuite {
	List<TestCase> TEST_CASES;
	String NAME;

	public TestSuite(String name) {
		NAME = name;
		TEST_CASES = new LinkedList<TestCase>();
	}

	public void add(TestCase testCase) {
		TEST_CASES.add(testCase);
	}
	
	public List<TestCase> getTestCases() {
		return TEST_CASES;
	}

	public void setCases(List<TestCase> testCases) {
		TEST_CASES = testCases;
	}	
	
	public String getName() {
		return NAME;
	}

	public void setName(String name) {
		NAME = name;
	}	
}


public class TestCase {
	List<TestStep> TEST_STEPS;
	String NAME;

	public TestCase(String name) {
		NAME = name;
		TEST_STEPS = new LinkedList<TestStep>();
	}

	public void add(TestStep testStep) {
		TEST_STEPS.add(testStep);
	}
	
	public List<TestStep> getTestSteps() {
		return TEST_STEPS;
	}

	public void setTestSteps(List<TestStep> testSteps) {
		TEST_STEPS = testSteps;
	}	

	public String getName() {
		return NAME;
	}

	public void setName(String name) {
		NAME = name;
	}	
}


public class TestStep {
	
	String REQUEST_RAW;
	String RESPONSE_RAW;
	String ASSERTIONS;
	String RESULT;
	String NAME;

	public TestStep(String name) {
		NAME = name;
	}

	public void setRequestRaw(String requestRaw) {
		REQUEST_RAW = requestRaw;
	}

	public String getRequestRaw() {
		return REQUEST_RAW;
	}

	public void setResponseRaw(String responseRaw) {
		RESPONSE_RAW = responseRaw;
	}

	public String getResponseRaw() {
		return RESPONSE_RAW;
	}

	public void setAssertions(String assertions) {
		ASSERTIONS = assertions;
	}

	public String getAssertions() {
		return ASSERTIONS;
	}

	public void setResult(String result) {
		RESULT = result;
	}

	public String getResult() {
		return RESULT;
	}

	public String getName() {
		return NAME;
	}

	public void setName(String name) {
		NAME = name;
	}	
}


